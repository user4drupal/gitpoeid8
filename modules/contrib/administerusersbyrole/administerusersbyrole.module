<?php

use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\User\UserInterface;
use Drupal\User\RoleInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemList;
use Drupal\Core\Database\Query\AlterableInterface;

/**
 * Generates a permission string for a given a role name.
 */
function _administerusersbyrole_build_perm_string($role_id, $op = 'edit') {
  $perm = "$op users with role $role_id";
  return $perm;
}

/**
 * Implements hook_ENTITY_TYPE_access() for entity type "user_role".
 *
 * @param \Drupal\User\RoleInterface $user
 *   The role object to check access for.
 *
 * @param string $operation: The operation that is to be performed on $entity.
 *
 * @param \Drupal\Core\Session\AccountInterface $account: The account trying to access the entity.
 */
function administerusersbyrole_user_role_access(RoleInterface $entity, $operation, AccountInterface $account) {
  // Allow users without the permission "administer permissions" to view the
  // role names in the /admin/people view.
  if ($operation == 'view') {
    return AccessResult::allowedIfHasPermission($account, 'access users overview');
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access() for entity type "user".
 *
 * @param \Drupal\User\UserInterface $user
 *   The user object to check access for.
 *
 * @param string $operation: The operation that is to be performed on $entity.
 *
 * @param \Drupal\Core\Session\AccountInterface $account: The account trying to access the entity.
 */
function administerusersbyrole_user_access(UserInterface $user, $operation, AccountInterface $account) {
  // Never allow uid 0 (anonymous) or 1 (master admin).
  if ($user->id() <= 1) {
    return AccessResult::neutral();
  }

  // Grant access to view blocked users if we can update them.
  if ($user->isBlocked() && ($operation == 'view')) {
    return administerusersbyrole_user_access($user, 'update', $account);
  }

  $convert = array('delete' => 'cancel', 'update' => 'edit');
  if (!isset($convert[$operation])) {
    return AccessResult::neutral();
  }

  $roles = $user->getRoles();
  foreach ($roles as $rid) {
    // If there is only AUTHENTICATED_ROLE, then we must test for it, otherwise skip it.
    if (($rid == AccountInterface::AUTHENTICATED_ROLE) && (count($roles) > 1)) {
      continue;
    }

    if (!$account->hasPermission(_administerusersbyrole_build_perm_string($rid, $convert[$operation]))) {
      return AccessResult::neutral();
    }
  }

  return AccessResult::allowed()->cachePerPermissions()->addCacheableDependency($user);
}

/**
 * Implements hook_entity_field_access().
 */
function administerusersbyrole_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemList $items = NULL) {
  if ($field_definition->getTargetEntityTypeId() != 'user') {
    return AccessResult::neutral();
  }

  $fields = array('name', 'status');
  if ($operation == 'view') {
    array_push($fields, 'roles', 'access');
  }

  if (!in_array($field_definition->getName(), $fields)) {
    return AccessResult::neutral();
  }

  if (is_null($items)) {
    // No field item list is passed.  This can be used to control whether to hide/show the whole column in views.
    // Hence allow if 'access users overview'.
    return AccessResult::allowedIfHasPermission($account, 'access users overview');
  }
  else {
    return administerusersbyrole_user_access($items->getEntity(), 'update', $account);
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function administerusersbyrole_query_administerusersbyrole_edit_access_alter(AlterableInterface $query) {
  $user = \Drupal::currentUser();
  // The tag administerusersbyrole_edit_access is used to indicate that we should filter out users where there isn't edit access.
  if (!$user->hasPermission('administer users')) {
    // Exclude the root user.
    $query->condition('users_field_data.uid', 1, '<>');

    $roles = user_roles(TRUE);
    foreach ($roles as $rid => $role) {
      if (!$user->hasPermission(_administerusersbyrole_build_perm_string($rid, 'edit'))) {
        $exclude[$rid] = $rid;
      }
    }

    if (isset($exclude[DRUPAL_AUTHENTICATED_RID])) {
      // No permission unless there is a role.
      $query->join('user__roles', 'ur', 'ur.entity_id=users_field_data.uid');
      unset($exclude[DRUPAL_AUTHENTICATED_RID]);
    }

    // Do an "anti-join" on the excluded roles - add a left join and then check the results set is null.
    // NB We don't have to check that $exclude might be empty, because it always contains the admin role.
    $urAlias = $query->leftjoin('user__roles', 'ur', 'ur.entity_id=users_field_data.uid AND ur.roles_target_id IN (:exclude[])', array(':exclude[]' => $exclude));
    $query->isNull("$urAlias.entity_id");
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Tediously the user module uses hard-coded permission names.
 * Add 'admin-only' fields back in depending on our permissions.
 */
function administerusersbyrole_form_user_register_form_alter(&$form, &$form_state) {
  $user = $form_state->getFormObject()->getEntity();
  $account = Drupal::currentUser();

  if ($account->hasPermission('create users')) {
    $user->activate();
    $form['account']['mail']['#required'] = FALSE;
    $form['account']['status']['#default_value'] = $user->get('status')->value;
    $form['account']['status']['#access'] = TRUE;
    $form['administer_users']['#value'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Tediously the user module uses hard-coded permission names.
 * Add 'admin-only' fields back in depending on our permissions.
 */
function administerusersbyrole_form_user_form_alter(&$form, &$form_state) {
  $user = $form_state->getFormObject()->getEntity();
  $account = Drupal::currentUser();

  if (administerusersbyrole_user_access($user, 'update', $account)->isAllowed()) {
    $form['account']['mail']['#required'] = FALSE;
    $form['account']['name']['#access'] = TRUE;
    $form['account']['status']['#access'] = TRUE;
  }

  if (administerusersbyrole_user_access($user, 'delete', $account)->isAllowed()) {
    $form['actions']['delete']['#access'] = TRUE;
  }
}

/**
 * Implements hook_help().
 */
function administerusersbyrole_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.administerusersbyrole':
      $output = '<h3>About</h3>';
      $output .= "<p>Administer Users by Role llows site builders to set up fine-grained permissions for
          allowing \"sub-admin\" users to edit and delete other users ? more specific
          than Drupal Core's all-or-nothing 'administer users' permission. It also
          provides and enforces a 'create users' permission. <br />";

      $output .= "Manage users, role and permissions in <a href=\"!pa_url\">People Administration page</a></p>";
      $output .= "<br><h3>New permissions</h3>";
      $output .= "<h6>Create new users</h6>";
      $output .= "Create users, at admin/people/create. If in the account settings (/admin/config/people/accounts) the administrator select that Visitors can register accounts but administrator approval is required, the accounts created will be as blocked account. If the administrator select that Visitors can create accounts, the accounts created will be as active";

      $output .= "<h6>Edit users with no custom roles</h6>";
      $output .= "Allows editing of any authenticated user that has no custom roles set.";
      $output .= "<h6>Edit users with no custom roles</h6>";
      $output .= "Allows editing of any authenticated user with the specified role.
        To edit a user with multiple roles, the sub-admin must have permission to
        edit ALL of those roles.  (\"Edit users with no custom roles\" is NOT needed.)";

      $output .= "<h6>Edit users with {role} role</h6>";

      $output .= "Allows edit accounts that have a custom role that the administrator creates <br />";

      $output .= "<br><strong>The permission for cancel work exactly the same as those for edit.</strong>";

      return t($output, array('!pa_url' => Url::fromRoute('entity.user.collection')));
      break;
  }
}
